{"version":3,"sources":["ApolloClient/client.js","components/Navbar.js","components/Menubar.js","features/companies/companyStore.js","components/companies/Company.js","components/companies/Companies.js","features/jobs/jobsStore.js","components/jobs/Job.js","components/jobs/Jobs.js","components/companies/CompanyProfile.js","components/jobs/JobProfile.js","components/post-job/PostJob.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["httpLink","createHttpLink","uri","client","ApolloClient","link","ApolloLink","from","cache","InMemoryCache","withRouter","className","position","edge","color","variant","to","history","useState","activeItem","setActiveItem","handleMenuClick","push","Menu","icon","Item","name","active","onClick","companyStore","createSlice","initialState","company","reducers","setCompany","state","action","payload","actions","selectCompany","companies","dispatch","useDispatch","handleClick","slug","Segment","raised","Image","src","logoUrl","size","Header","as","websiteUrl","Icon","twitter","COMPANIES_QUERY","gql","Companies","useQuery","data","loading","error","filter","setFilter","Dimmer","inverted","Loader","Dropdown","placeholder","clearable","onChange","event","value","selection","options","key","text","map","id","jobsStore","job","setJob","selectJob","jobs","tags","title","_","tag","Label","rel","href","applyUrl","target","JOBS_QUERY","Jobs","useSelector","Fragment","circular","remarkPlugins","gfm","description","PostJob","setTitle","compnayName","setCompnayName","userEmail","setUserEmail","setApplyUrl","country","setCountry","city","setCity","setDescription","cityOptions","setCityOptions","setCommitment","setRemotes","tagOptions","setTagOptions","setTags","locationNames","setLocationNames","countryOptions","countries","commitmentsOptions","commitments","cmt","remotessOptions","remotes","rmt","Form","onSubmit","console","log","Field","control","Input","label","e","Group","widths","fluid","search","cities","__typename","TextArea","multiple","allowAdditions","onAddItem","slugify","Button","primary","App","ApolloProvider","exact","path","combineReducers","companyReducer","jobReducer","persistConfig","storage","persistedReducer","persistReducer","store","configureStore","reducer","devTools","process","middleware","thunk","Boolean","window","location","hostname","match","persistor","persistStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+cAEMA,EAAWC,YAAe,CAC5BC,IAAK,8BAGIC,EAAS,IAAIC,IAAa,CACnCC,KAAMC,aAAWC,KAAK,CAACP,IACvBQ,MAAO,IAAIC,M,2HCsBAC,eArBA,WACX,OAEI,qBAAKC,UAAU,SAAf,SAEI,cAAC,IAAD,CAAQC,SAAS,SAAjB,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAYC,KAAK,QAAQF,UAAU,kBAAkBG,MAAM,UAAU,aAAW,SAGhF,cAAC,IAAD,CAAYC,QAAQ,KAAKJ,UAAU,OAAnC,wBAGA,cAAC,IAAD,CAAMA,UAAU,WAAWK,GAAG,YAA9B,kC,iBC6BLN,G,OAAAA,aA7CC,SAAC,GAAiB,IAAfO,EAAc,EAAdA,QACf,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAEMC,EAAkB,SAAChB,GACrBe,EAAcf,GACdY,EAAQK,KAAR,WAAiBjB,KAGrB,OACI,qBAAKM,UAAU,YAAf,SAEI,eAACY,EAAA,EAAD,CAAMC,KAAK,UAAX,UACI,cAACD,EAAA,EAAKE,KAAN,CACIC,KAAK,YACLC,OAAuB,cAAfR,EACRS,QAAS,WAAQP,EAAgB,cAHrC,uBASA,cAACE,EAAA,EAAKE,KAAN,CACIC,KAAK,OACLC,OAAuB,SAAfR,EACRS,QAAS,WAAQP,EAAgB,SAHrC,kBAQA,cAACE,EAAA,EAAKE,KAAN,CACIC,KAAK,WACLC,OAAuB,aAAfR,EACRS,QAAS,WAAQP,EAAgB,aAHrC,+B,6EC7BHQ,EAAeC,YAAY,CACtCJ,KAAM,YACNK,aANmB,CACnBC,QAAS,IAMTC,SAAU,CACRC,WAAY,SAACC,EAAOC,GAClBD,EAAMH,QAAUI,EAAOC,YAKdH,EAAeL,EAAaS,QAA5BJ,WAEFK,EAAgB,SAACJ,GAAD,OAAWA,EAAMK,UAAUR,SAEzCH,IAAf,QCkBenB,G,OAAAA,aA7BC,SAAC,GAA0B,IAAxBsB,EAAuB,EAAvBA,QAASf,EAAc,EAAdA,QAClBwB,EAAWC,cAEXC,EAAc,SAAAX,GACZS,EAASP,EAAWF,KACpBf,EAAQK,KAAR,qBAA2BU,EAAQY,QAI3C,OAAQ,eAACC,EAAA,EAAD,CAASC,QAAM,EAACnC,UAAU,UAA1B,UACJ,cAACoC,EAAA,EAAD,CAAOC,IAAKhB,EAAQiB,QAAUjB,EAAQiB,QAAU,oBAAqBC,KAAK,UAC1E,sBAAKvC,UAAU,kBAAf,UACI,cAACwC,EAAA,EAAD,CAAQxC,UAAU,eAAeyC,GAAG,KAAKxB,QAAS,WAAQe,EAAYX,IAAtE,SACKA,EAAQN,OAEb,4BACKM,EAAQqB,aAEb,8BACI,cAACC,EAAA,EAAD,CAAM5B,KAAK,YADf,IAC6BM,EAAQuB,cAGzC,8BACI,wBAAQ3B,QAAS,WAAQe,EAAYX,IAAYrB,UAAU,iBAA3D,gC,oCC1BN6C,EAAkBC,YAAH,qVAwENC,EA/CG,WAEhB,MAAiCC,YAASH,GAAlCI,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,MAEvB,EAA4B5C,mBAAS,IAArC,mBAAO6C,EAAP,KAAeC,EAAf,KAEA,GAAIH,EACF,OAAO,cAACI,EAAA,EAAD,CAAQtC,QAAM,EAACuC,UAAQ,EAAvB,SACL,cAACC,EAAA,EAAD,CAAQD,UAAQ,EAAhB,uBAIJ,GAAIJ,EACF,OAAO,8BAAMA,IAGf,IAAsBtB,EAiBtB,OACE,gCACE,qBAAK7B,UAAU,gBAAf,SAEE,cAACyD,EAAA,EAAD,CAAUC,YAAY,SAASC,WAAS,EAACC,SAfpB,SAACC,EAAD,GAAuB,IAAbC,EAAY,EAAZA,MACnCT,EAAUS,IAciEC,WAAS,EAACD,MAAOV,EAAQY,QAXhF,CACpB,CAAEC,IAAK,YAAaC,KAAM,iBAAkBJ,MAAO,aACnD,CAAEG,IAAK,YAAaC,KAAM,iBAAkBJ,MAAO,aACnD,CAAEG,IAAK,SAAUC,KAAM,cAAeJ,MAAO,UAC7C,CAAEG,IAAK,SAAUC,KAAM,cAAeJ,MAAO,gBAdzBjC,EAyBHoB,EAAKpB,UAxBfA,EAAUsC,KAAI,SAAA9C,GACnB,OAAO,cAAC,EAAD,CAA0BA,QAASA,GAArBA,EAAQ+C,Y,SC3CtBC,EAAYlD,YAAY,CACjCJ,KAAM,OACNK,aANiB,CACjBkD,IAAK,IAMLhD,SAAU,CACNiD,OAAQ,SAAC/C,EAAOC,GACZD,EAAM8C,IAAM7C,EAAOC,YAKhB6C,GAAWF,EAAU1C,QAArB4C,OAEFC,GAAY,SAAChD,GAAD,OAAWA,EAAMiD,KAAKH,KAEhCD,KAAf,Q,oBC0BetE,I,OAAAA,aApCH,SAAC,GAAsB,IASb2E,EATPJ,EAAmB,EAAnBA,IAAKhE,EAAc,EAAdA,QACVwB,EAAWC,cAgBjB,OAAQ,eAACG,EAAA,EAAD,CAASC,QAAM,EAACnC,UAAU,MAA1B,UACJ,8BACI,cAACwC,EAAA,EAAD,CAAQvB,QAAS,YAhBL,SAAAqD,GACZxC,EAASyC,GAAOD,KAChBhE,EAAQK,KAAR,gBAAsB2D,EAAIrC,OAcDD,CAAYsC,IAAQ7B,GAAG,KAAKzC,UAAU,eAA/D,SACKsE,EAAIK,UAIb,qBAAK3E,UAAU,WAAf,UAfc0E,EAgBAJ,EAAII,KAfXE,KAAET,IAAIO,GAAM,SAAAG,GACf,OAAQ,cAACC,EAAA,EAAD,CAAOrC,GAAG,IAAIoC,KAAG,EAAjB,SACHA,EAAI9D,MADsB8D,EAAIT,UAiBvC,8BAEI,mBAAGW,IAAI,aAAaC,KAAMV,EAAIW,SAAUC,OAAO,SAA/C,SAAwD,wBAAQlF,UAAU,iBAAlB,8BClC9DmF,I,OAAarC,YAAH,0TAyCDsC,GAnBF,WAET,MAAiCpC,YAASmC,IAAlClC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,MAEvB,OAAID,EACO,cAACI,EAAA,EAAD,CAAQtC,QAAM,EAACuC,UAAQ,EAAvB,SACH,cAACC,EAAA,EAAD,CAAQD,UAAQ,EAAhB,uBAIJJ,EACO,8BAAMA,IAGVF,EAAKwB,KAAKN,KAAI,SAAAG,GACjB,OAAO,cAAC,GAAD,CAAkBA,IAAKA,GAAbA,EAAIF,QCKdrE,I,OAAAA,aAvCQ,SAAC,GAAgB,EAAdO,QAAe,IAE/Be,EAAUgE,YAAYzD,GAE5B,OACI,eAAC,IAAM0D,SAAP,WACI,sBAAKtF,UAAU,iBAAf,UACI,+BAEI,cAACoC,EAAA,EAAD,CAAOC,IAAKhB,EAAQiB,QAAUjB,EAAQiB,QAAU,oBAAqBC,KAAK,OAAOgD,UAAQ,MAI7F,8BAEI,0CAAalE,EAAQN,UAIzB,gCAEI,4BACKM,EAAQqB,aAEb,8BACI,cAACC,EAAA,EAAD,CAAM5B,KAAK,YADf,IAC6BM,EAAQuB,iBAK7C,qBAAK5C,UAAU,eAAf,SAEQ4E,KAAET,IAAI9C,EAAQoD,MAAM,SAAAH,GAAG,OAAI,cAAC,GAAD,CAAkBA,IAAKA,GAAbA,EAAIF,gB,0CCI9CrE,I,OAAAA,aAnCI,SAAC,GAAgB,EAAdO,QAAe,IAGfoE,EAFZJ,EAAMe,YAAYb,IAUxB,OAAQ,eAACtC,EAAA,EAAD,CAASlC,UAAU,eAAnB,UACJ,sBAAKA,UAAU,aAAf,UACI,cAACwC,EAAA,EAAD,CAAQC,GAAG,KAAX,SACK6B,EAAIK,QAET,qBAAK3E,UAAU,aAAf,SACI,mBAAG+E,IAAI,aAAaC,KAAMV,EAAIW,SAAUC,OAAO,SAA/C,SAAwD,wBAAQlF,UAAU,oBAAlB,8BAIhE,qBAAKA,UAAU,YAAf,UAlBc0E,EAmBAJ,EAAII,KAlBXE,KAAET,IAAIO,GAAM,SAAAG,GACf,OAAQ,cAACC,EAAA,EAAD,CAAOrC,GAAG,IAAIoC,KAAG,EAAjB,SACHA,EAAI9D,MADsB8D,EAAIT,UAoBvC,qBAAKpE,UAAU,mBAAf,SACI,cAAC,KAAD,CAAewF,cAAe,CAACC,MAA/B,SAAsCnB,EAAIoB,gBAG9C,qBAAK1F,UAAU,aAAf,SACI,mBAAG+E,IAAI,aAAaC,KAAMV,EAAIW,SAAUC,OAAO,SAA/C,SAAwD,wBAAQlF,UAAU,oBAAlB,kC,sEChC9DmF,GAAarC,YAAH,0TA6QD6C,IApPQ7C,YAAH,iiBAqCJ,WAEZ,MAAiCE,YAASmC,IAAlClC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAEd,GAFA,EAAuBC,MAEG5C,mBAAS,KAAnC,mBAAOoE,EAAP,KAAciB,EAAd,KACA,EAAsCrF,mBAAS,IAA/C,mBAAOsF,EAAP,KAAoBC,EAApB,KACA,EAAkCvF,mBAAS,IAA3C,mBAAOwF,EAAP,KAAkBC,EAAlB,KACA,EAAgCzF,mBAAS,IAAzC,mBAAO0E,EAAP,KAAiBgB,EAAjB,KACA,EAA8B1F,mBAAS,IAAvC,mBAAO2F,EAAP,KAAgBC,EAAhB,KACA,EAAwB5F,mBAAS,IAAjC,mBAAO6F,EAAP,KAAaC,EAAb,KACA,EAAsC9F,mBAAS,IAA/C,mBAAOmF,EAAP,KAAoBY,EAApB,KACA,EAAsC/F,mBAAS,IAA/C,mBAAOgG,EAAP,KAAoBC,EAApB,KACA,EAAoCjG,mBAAS,IAA7C,mBAAmBkG,GAAnB,WACA,EAA8BlG,mBAAS,IAAvC,mBAAgBmG,GAAhB,WACA,EAAoCnG,mBAAS,IAA7C,mBAAOoG,EAAP,KAAmBC,EAAnB,KACA,EAAwBrG,mBAAS,IAAjC,mBAAOmE,GAAP,KAAamC,GAAb,KACA,GAA0CtG,mBAAS,IAAnD,qBAAOuG,GAAP,MAAsBC,GAAtB,MAEA,GAAI7D,EACA,OAAO,cAACI,EAAA,EAAD,CAAQtC,QAAM,EAACuC,UAAQ,EAAvB,SACH,cAACC,EAAA,EAAD,CAAQD,UAAQ,EAAhB,uBAIR,IAAMyD,GAAiBpC,KAAET,IAAIlB,EAAKgE,WAAW,SAAAf,GACzC,MAAO,CAAEjC,IAAKiC,EAAQ9B,GAAIF,KAAMgC,EAAQnF,KAAM+C,MAAOoC,MAGnDgB,GAAqBtC,KAAET,IAAIlB,EAAKkE,aAAa,SAAAC,GAC/C,MAAO,CAAEnD,IAAKmD,EAAIhD,GAAIF,KAAMkD,EAAIzC,MAAOb,MAAOsD,MAG5CC,GAAkBzC,KAAET,IAAIlB,EAAKqE,SAAS,SAAAC,GACxC,MAAO,CAAEtD,IAAKsD,EAAInD,GAAIF,KAAMqD,EAAIxG,KAAM+C,MAAOyD,MA6CjD,OAAQ,gCACJ,8CACA,eAACC,GAAA,EAAD,CAAMC,SANW,WACjBC,QAAQC,IAAIhD,EAAOM,EAAUiB,EAASE,EAAMV,IAK5C,UAEI,cAAC8B,GAAA,EAAKI,MAAN,CACIC,QAASC,KACTC,MAAM,eACNrE,YAAY,eACZI,MAAO+B,EACPjC,SAAU,SAACoE,EAAD,OAAMlE,EAAN,EAAMA,MAAN,OAAkBgC,EAAehC,IAC3C/C,KAAK,gBAGT,cAACyG,GAAA,EAAKI,MAAN,CACIC,QAASC,KACTC,MAAM,aACNrE,YAAY,YACZI,MAAOiC,EACPnC,SAAU,SAACoE,EAAD,OAAMlE,EAAN,EAAMA,MAAN,OAAkBkC,EAAalC,IACzC/C,KAAK,yBAGT,cAACyG,GAAA,EAAKI,MAAN,CACIC,QAASC,KACTC,MAAM,YACNrE,YAAY,YACZI,MAAOa,EACPf,SAAU,SAACoE,EAAD,OAAMlE,EAAN,EAAMA,MAAN,OAAkB8B,EAAS9B,IACrC/C,KAAK,UAGT,cAACyG,GAAA,EAAKI,MAAN,CACIC,QAASC,KACTC,MAAM,YACNrE,YAAY,YACZE,SAAU,SAACoE,EAAD,OAAMlE,EAAN,EAAMA,MAAN,OAAkBmC,EAAYnC,IACxCA,MAAOmB,IAGX,eAACuC,GAAA,EAAKS,MAAN,CAAYC,OAAO,QAAnB,UACI,eAACV,GAAA,EAAKI,MAAN,WACI,4CACA,cAACnE,EAAA,EAAD,CACIC,YAAY,iBACZyE,OAAK,EACLC,QAAM,EACNrE,WAAS,EACTC,QAASgD,GACTpD,SA1FQ,SAACoE,EAAD,GAAmB,IAAblE,EAAY,EAAZA,MAE1BE,EAAUY,KAAET,IAAIL,EAAMuE,QAAQ,SAAAjC,GAC9B,MAAO,CAAEnC,IAAKmC,EAAKhC,GAAIF,KAAMkC,EAAKrF,KAAM+C,MAAOsC,MAGnDI,EAAexC,GAEfmC,EAAW,CAAE/B,GAAIN,EAAMM,GAAIrD,KAAM+C,EAAM/C,KAAMkB,KAAM6B,EAAM7B,KAAMqG,WAAYxE,EAAMwE,mBAqFzE,eAACd,GAAA,EAAKI,MAAN,WACI,yCACA,cAACnE,EAAA,EAAD,CACIC,YAAY,cACZyE,OAAK,EACLC,QAAM,EACNrE,WAAS,EACTC,QAASuC,EACT3C,SA1FK,SAACoE,EAAD,GAAmB,IAAblE,EAAY,EAAZA,MAC3BuC,EAAQvC,YA6FJ,cAAC0D,GAAA,EAAKI,MAAN,CACIC,QAASU,KACTR,MAAM,kBACNrE,YAAY,kBACZI,MAAO4B,EACP9B,SAAU,SAACoE,EAAD,OAAMlE,EAAN,EAAMA,MAAN,OAAkBwC,EAAexC,MAG/C,eAAC0D,GAAA,EAAKS,MAAN,CAAYC,OAAO,QAAnB,UACI,eAACV,GAAA,EAAKI,MAAN,WACI,+CACA,cAACnE,EAAA,EAAD,CACIC,YAAY,aACZyE,OAAK,EACLC,QAAM,EACNrE,WAAS,EACTC,QAASkD,GACTtD,SAAU,SAACoE,EAAD,GAAmB,IAAblE,EAAY,EAAZA,MAAc2C,EAAc3C,SAIpD,eAAC0D,GAAA,EAAKI,MAAN,WACI,4CACA,cAACnE,EAAA,EAAD,CACIC,YAAY,UACZyE,OAAK,EACLC,QAAM,EACNrE,WAAS,EACTC,QAASqD,GACTzD,SAAU,SAACoE,EAAD,GAAmB,IAAblE,EAAY,EAAZA,MAAc4C,EAAW5C,YAMrD,cAAC0D,GAAA,EAAKI,MAAN,CACIC,QAASC,KACTC,MAAM,YACNrE,YAAY,YACZE,SAAU,SAACoE,EAAD,OAAMlE,EAAN,EAAMA,MAAN,OAAkBiD,GAAiBjD,IAC7CA,MAAOgD,KAGX,eAACU,GAAA,EAAKI,MAAN,WACI,yCACA,cAACnE,EAAA,EAAD,CACIO,QAAS2C,EACTjD,YAAY,OACZ0E,QAAM,EACNrE,WAAS,EACToE,OAAK,EACLK,UAAQ,EACRC,gBAAc,EACd3E,MAAOY,GACPgE,UAhJO,SAACV,EAAD,GAAmB,IAAblE,EAAY,EAAZA,MAEzB6C,EAAWhG,KACP,CACIsD,IAAKH,EACLA,MAAO,CACH/C,KAAM+C,EACN7B,KAAM0G,KAAQ7E,IAElBI,KAAMJ,IAId4D,QAAQC,IAAIhB,GACZC,EAAcD,IAmIF/C,SAhIQ,SAACoE,EAAD,GAAmB,IAAblE,EAAY,EAAZA,MAC1BY,GAAK/D,KAAKmD,GACV+C,GAAQnC,IACRgD,QAAQC,IAAIjD,UAiIR,cAACkE,GAAA,EAAD,CAAQC,SAAO,EAAf,4BCvNGC,OArCf,WACE,OACE,cAACC,EAAA,EAAD,CAAgBvJ,OAAQA,EAAxB,SACE,cAAC,IAAD,UACE,sBAAKQ,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,qBAAKA,UAAU,YAAf,SAEE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOgJ,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,aAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,mBAAlB,SACE,cAAC,GAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,QAAlB,SACE,cAAC,GAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,cAAlB,SACE,cAAC,GAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,YAAlB,SACE,cAAC,GAAD,mB,kDCnCV3H,GAAW4H,aAAgB,CAC/BrH,UAAWsH,EACX1E,KAAM2E,KAGFC,GAAgB,CACpBpF,IAAK,OACLqF,cAGIC,GAAmBC,aAAeH,GAAe/H,IAE1CmI,GAAQC,YAAe,CAClCC,QAASJ,GACTK,UAAUC,EACVC,WAAY,CAACC,QCZKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qBCNFC,GAAYC,aAAab,IAE7Bc,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUhB,MAAOA,GAAjB,SACE,cAAC,KAAD,CAAavG,QAAS,KAAMmH,UAAWA,GAAvC,SACE,cAAC,GAAD,UAINK,SAASC,eAAe,SD6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.f5dacaa1.chunk.js","sourcesContent":["import { ApolloClient, ApolloLink, InMemoryCache, createHttpLink } from \"@apollo/client\";\n\nconst httpLink = createHttpLink({\n    uri: \"https://api.graphql.jobs \"\n});\n\nexport const client = new ApolloClient({\n    link: ApolloLink.from([httpLink]),\n    cache: new InMemoryCache(),\n});","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport './Navbar.css';\nimport { Link, withRouter } from 'react-router-dom';\n\nconst Navbar = () => {\n    return (\n\n        <div className=\"navbar\">\n\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" className=\"the_menu_button\" color=\"inherit\" aria-label=\"menu\">\n\n                    </IconButton>\n                    <Typography variant=\"h6\" className=\"logo\" >\n                        Job Portal\n                    </Typography>\n                    <Link className=\"post_job\" to=\"/post-job\">Post a Job</Link>\n                </Toolbar>\n            </AppBar>\n\n        </div>\n    )\n}\n\nexport default withRouter(Navbar);","import React, { useState } from 'react'\nimport { withRouter } from \"react-router-dom\";\n\nimport { Menu, Icon } from 'semantic-ui-react';\nimport './Menubar.css';\n\nconst Menubar = ({ history }) => {\n    const [activeItem, setActiveItem] = useState('');\n\n    const handleMenuClick = (link) => {\n        setActiveItem(link);\n        history.push(`/${link}`);\n    }\n\n    return (\n        <div className=\"main_menu\">\n\n            <Menu icon='labeled' >\n                <Menu.Item\n                    name='companies'\n                    active={activeItem === 'companies'}\n                    onClick={() => { handleMenuClick('companies') }}\n                >\n\n                    Companies\n                </Menu.Item>\n\n                <Menu.Item\n                    name='jobs'\n                    active={activeItem === 'jobs'}\n                    onClick={() => { handleMenuClick('jobs') }}\n                >\n                    Jobs\n                </Menu.Item>\n\n                <Menu.Item\n                    name='post-job'\n                    active={activeItem === 'post-job'}\n                    onClick={() => { handleMenuClick('post-job') }}\n                >\n                    Post Job\n                </Menu.Item>\n\n            </Menu>\n\n\n\n        </div>\n    )\n}\n\nexport default withRouter(Menubar);","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  company: {}\n};\n\nexport const companyStore = createSlice({\n  name: 'companies',\n  initialState,\n  reducers: {\n    setCompany: (state, action) => {\n      state.company = action.payload;\n    },\n  },\n});\n\nexport const { setCompany } = companyStore.actions;\n\nexport const selectCompany = (state) => state.companies.company;\n\nexport default companyStore.reducer;\n","import React from 'react';\nimport { withRouter } from 'react-router';\nimport { Header, Segment, Image, Icon } from 'semantic-ui-react';\nimport { useDispatch } from 'react-redux';\nimport {\n    setCompany\n} from '../../features/companies/companyStore';\nimport './Company.css';\n\nconst Company = ({ company, history }) => {\n    const dispatch = useDispatch();\n\n    const handleClick = company => {\n        if (dispatch(setCompany(company))) {\n            history.push(`/companies/${company.slug}`);\n        }\n    }\n\n    return (<Segment raised className=\"company\">\n        <Image src={company.logoUrl ? company.logoUrl : '/assets/image.png'} size='small' />\n        <div className=\"company_details\">\n            <Header className=\"company_name\" as=\"h3\" onClick={() => { handleClick(company) }}>\n                {company.name}\n            </Header>\n            <p>\n                {company.websiteUrl}\n            </p>\n            <p>\n                <Icon name=\"twitter\" /> {company.twitter}\n            </p>\n        </div>\n        <div>\n            <button onClick={() => { handleClick(company) }} className=\"ui button teal\">View Jobs</button>\n        </div>\n\n    </Segment>);\n}\n\nexport default withRouter(Company);","import React, { useState } from 'react';\nimport { useQuery, gql } from \"@apollo/client\";\nimport Company from './Company';\nimport './Companies.css';\nimport { Dimmer, Loader, Dropdown } from 'semantic-ui-react';\n\nconst COMPANIES_QUERY = gql`\nquery getCompanies{\n    companies{\n      id\n      name\n      slug\n      websiteUrl\n      logoUrl\n      jobs{\n        id\n        title\n        slug\n        description\n        tags(first:4){\n          id\n          name\n          slug\n        }\n      }\n      twitter\n      createdAt\n    }\n  }\n`;\n\nconst Companies = () => {\n\n  const { data, loading, error } = useQuery(COMPANIES_QUERY);\n\n  const [filter, setFilter] = useState('');\n\n  if (loading) {\n    return <Dimmer active inverted>\n      <Loader inverted>Loading</Loader>\n    </Dimmer>;\n  }\n\n  if (error) {\n    return <div>{error}</div>;\n  }\n\n  const listCompanies = companies => {\n    return companies.map(company => {\n      return <Company key={company.id} company={company} />;\n    });\n  }\n\n  const handleFilterChange = (event, { value }) => {\n    setFilter(value);\n  }\n\n  const filterOptions = [\n    { key: 'full-time', text: 'Full Time Jobs', value: 'full-time' },\n    { key: 'part-time', text: 'Part Time Jobs', value: 'part-time' },\n    { key: 'remote', text: 'Remote Jobs', value: 'remote' },\n    { key: 'onsite', text: 'Onsite Jobs', value: 'onsite' },\n  ];\n\n  return (\n    <div>\n      <div className=\"filter_header\">\n\n        <Dropdown placeholder='Filter' clearable onChange={handleFilterChange} selection value={filter} options={filterOptions} />\n\n      </div>\n\n      {listCompanies(data.companies)}\n    </div>\n  )\n\n}\n\nexport default Companies;","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n    job: {}\n};\n\nexport const jobsStore = createSlice({\n    name: 'jobs',\n    initialState,\n    reducers: {\n        setJob: (state, action) => {\n            state.job = action.payload;\n        },\n    },\n});\n\nexport const { setJob } = jobsStore.actions;\n\nexport const selectJob = (state) => state.jobs.job;\n\nexport default jobsStore.reducer;\n","import React from 'react';\nimport { withRouter } from 'react-router';\nimport { Header, Segment, Label } from 'semantic-ui-react';\nimport { useDispatch } from 'react-redux';\nimport {\n    setJob\n} from '../../features/jobs/jobsStore';\nimport _ from 'lodash';\nimport './Job.css';\n\nconst Job = ({ job, history }) => {\n    const dispatch = useDispatch();\n\n    const handleClick = job => {\n        if (dispatch(setJob(job))) {\n            history.push(`/jobs/${job.slug}`);\n        }\n    }\n\n    const listTags = (tags) => {\n        return _.map(tags, tag => {\n            return (<Label as='a' tag key={tag.id}>\n                {tag.name}\n            </Label>);\n        })\n    }\n\n    return (<Segment raised className=\"job\">\n        <div>\n            <Header onClick={() => { handleClick(job) }} as=\"h3\" className=\"job__heading\">\n                {job.title}\n            </Header>\n        </div>\n\n        <div className=\"job_tags\">\n            {listTags(job.tags)}\n        </div>\n\n        <div>\n\n            <a rel=\"noreferrer\" href={job.applyUrl} target=\"_blank\"><button className=\"ui button blue\" >Apply</button></a>\n\n        </div>\n    </Segment>);\n}\n\nexport default withRouter(Job);","import React from 'react';\nimport { useQuery, gql } from \"@apollo/client\";\nimport Job from './Job';\nimport './Jobs.css';\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\nconst JOBS_QUERY = gql`\nquery getjobs{\n    jobs{\n        id\n        title\n        slug\n        applyUrl\n        description\n        tags(first:5){\n          id\n          name\n          slug\n        }\n        commitment{\n            id\n            title\n            slug\n        }\n    }\n  }\n`;\n\nconst Jobs = () => {\n\n    const { data, loading, error } = useQuery(JOBS_QUERY);\n\n    if (loading) {\n        return <Dimmer active inverted>\n            <Loader inverted>Loading</Loader>\n        </Dimmer>;\n    }\n\n    if (error) {\n        return <div>{error}</div>;\n    }\n\n    return data.jobs.map(job => {\n        return <Job key={job.id} job={job} />;\n    });\n}\n\nexport default Jobs;","import React from 'react';\nimport { withRouter } from 'react-router';\nimport { Header, Icon, Image } from 'semantic-ui-react';\nimport { useSelector } from 'react-redux';\nimport { selectCompany } from '../../features/companies/companyStore';\nimport './CompanyProfile.css';\nimport Job from '../jobs/Job';\nimport _ from 'lodash';\n\nconst CompanyProfile = ({ history }) => {\n\n    const company = useSelector(selectCompany);\n\n    return (\n        <React.Fragment>\n            <div className=\"profile_header\">\n                <span>\n\n                    <Image src={company.logoUrl ? company.logoUrl : '/assets/image.png'} size='tiny' circular />\n\n                </span>\n\n                <div>\n\n                    <h1>Jobs at {company.name}</h1>\n\n                </div>\n\n                <div>\n\n                    <p>\n                        {company.websiteUrl}\n                    </p>\n                    <p>\n                        <Icon name=\"twitter\" /> {company.twitter}\n                    </p>\n\n                </div>\n            </div>\n            <div className=\"jobs_listing\">\n                {\n                    _.map(company.jobs, job => <Job key={job.id} job={job} />)\n                }\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default withRouter(CompanyProfile);","import React from 'react';\nimport { withRouter } from 'react-router';\nimport { Header, Segment, Label } from 'semantic-ui-react';\nimport { useSelector } from 'react-redux';\nimport { selectJob } from '../../features/jobs/jobsStore';\nimport _ from 'lodash';\nimport ReactMarkdown from \"react-markdown\";\nimport gfm from \"remark-gfm\";\nimport './JobProfile.css';\n\nconst JobProfile = ({ history }) => {\n    const job = useSelector(selectJob);\n\n    const listTags = (tags) => {\n        return _.map(tags, tag => {\n            return (<Label as='a' tag key={tag.id}>\n                {tag.name}\n            </Label>);\n        })\n    }\n\n    return (<Segment className=\"job__profile\">\n        <div className=\"top_header\">\n            <Header as=\"h3\">\n                {job.title}\n            </Header>\n            <div className=\"apply__now\">\n                <a rel=\"noreferrer\" href={job.applyUrl} target=\"_blank\"><button className=\"ui button primary\" >Apply Now</button></a>\n            </div>\n        </div>\n\n        <div className=\"job__tags\">\n            {listTags(job.tags)}\n        </div>\n\n        <div className=\"job__description\">\n            <ReactMarkdown remarkPlugins={[gfm]}>{job.description}</ReactMarkdown>\n        </div>\n\n        <div className=\"apply__now\">\n            <a rel=\"noreferrer\" href={job.applyUrl} target=\"_blank\"><button className=\"ui button primary\" >Apply Now</button></a>\n        </div>\n    </Segment>);\n}\n\nexport default withRouter(JobProfile);","import React, { useEffect, useRef, useState } from 'react';\nimport _ from 'lodash';\nimport { useQuery, gql } from \"@apollo/client\";\n\nimport './PostJob.css';\nimport { Dimmer, Loader, Form, Input, TextArea, Button, Dropdown } from 'semantic-ui-react';\nimport slugify from 'react-slugify';\n\nconst JOBS_QUERY = gql`\nquery getCommitments{\n    commitments{\n      id\n      title\n      slug\n    }\n    countries{\n        id\n        name\n        slug\n        cities{\n          id\n          name\n          slug\n        }\n    }\n    remotes{\n        id\n        name\n        slug\n    }\n  }\n`;\n\nconst POST_JOB_QUERY = gql`\nmutation Mutation($postJobInput: PostJobInput!) {\n    postJob(input: $postJobInput) {\n      title\n      description\n      applyUrl\n      commitment {\n        id\n      }\n      company {\n        name\n      }\n      countries {\n        id\n        name\n        slug\n      }\n      cities {\n        id\n        name\n        slug\n      }\n      remotes {\n        id\n        name\n      }\n      slug\n      tags {\n        name\n        slug\n      }\n      locationNames\n      userEmail\n    }\n  }  \n`;\n\nconst PostJob = () => {\n\n    const { data, loading, error } = useQuery(JOBS_QUERY);\n\n    const [title, setTitle] = useState('');\n    const [compnayName, setCompnayName] = useState('');\n    const [userEmail, setUserEmail] = useState('');\n    const [applyUrl, setApplyUrl] = useState('');\n    const [country, setCountry] = useState({});\n    const [city, setCity] = useState({});\n    const [description, setDescription] = useState('');\n    const [cityOptions, setCityOptions] = useState([]);\n    const [commitment, setCommitment] = useState({});\n    const [remotes, setRemotes] = useState({});\n    const [tagOptions, setTagOptions] = useState([]);\n    const [tags, setTags] = useState([]);\n    const [locationNames, setLocationNames] = useState([]);\n\n    if (loading) {\n        return <Dimmer active inverted>\n            <Loader inverted>Loading</Loader>\n        </Dimmer>;\n    }\n\n    const countryOptions = _.map(data.countries, country => {\n        return { key: country.id, text: country.name, value: country };\n    });\n\n    const commitmentsOptions = _.map(data.commitments, cmt => {\n        return { key: cmt.id, text: cmt.title, value: cmt };\n    });\n\n    const remotessOptions = _.map(data.remotes, rmt => {\n        return { key: rmt.id, text: rmt.name, value: rmt };\n    });\n\n    const handleCountryChange = (e, { value }) => {\n\n        let options = _.map(value.cities, city => {\n            return { key: city.id, text: city.name, value: city };\n        });\n\n        setCityOptions(options)\n\n        setCountry({ id: value.id, name: value.name, slug: value.slug, __typename: value.__typename });\n    }\n\n    const handleCityChange = (e, { value }) => {\n        setCity(value);\n    }\n\n    const handleAddition = (e, { value }) => {\n\n        tagOptions.push(\n            {\n                key: value,\n                value: {\n                    name: value,\n                    slug: slugify(value)\n                },\n                text: value\n            }\n        );\n\n        console.log(tagOptions);\n        setTagOptions(tagOptions);\n    }\n\n    const handleTagChange = (e, { value }) => {\n        tags.push(value);\n        setTags(tags);\n        console.log(tags);\n    }\n\n    const handleSubmit = () => {\n        console.log(title, applyUrl, country, city, description);\n    }\n\n    return (<div>\n        <h2>Post New Job</h2>\n        <Form onSubmit={handleSubmit}>\n\n            <Form.Field\n                control={Input}\n                label='Company Name'\n                placeholder='Company Name'\n                value={compnayName}\n                onChange={(e, { value }) => setCompnayName(value)}\n                name=\"compnayName\"\n            />\n\n            <Form.Field\n                control={Input}\n                label='User Email'\n                placeholder='Uer Email'\n                value={userEmail}\n                onChange={(e, { value }) => setUserEmail(value)}\n                name=\"compnauserEmailyName\"\n            />\n\n            <Form.Field\n                control={Input}\n                label='Job Title'\n                placeholder='Job Title'\n                value={title}\n                onChange={(e, { value }) => setTitle(value)}\n                name=\"title\"\n            />\n\n            <Form.Field\n                control={Input}\n                label='Apply URL'\n                placeholder='Apply URL'\n                onChange={(e, { value }) => setApplyUrl(value)}\n                value={applyUrl}\n            />\n\n            <Form.Group widths='equal'>\n                <Form.Field>\n                    <label>Country</label>\n                    <Dropdown\n                        placeholder='Select Country'\n                        fluid\n                        search\n                        selection\n                        options={countryOptions}\n                        onChange={handleCountryChange}\n                    />\n                </Form.Field>\n                <Form.Field>\n                    <label>City</label>\n                    <Dropdown\n                        placeholder='Select City'\n                        fluid\n                        search\n                        selection\n                        options={cityOptions}\n                        onChange={handleCityChange}\n                    />\n                </Form.Field>\n            </Form.Group>\n            <Form.Field\n                control={TextArea}\n                label='Job Description'\n                placeholder='Job Description'\n                value={description}\n                onChange={(e, { value }) => setDescription(value)}\n            />\n\n            <Form.Group widths='equal'>\n                <Form.Field>\n                    <label>Commitment</label>\n                    <Dropdown\n                        placeholder='Commitment'\n                        fluid\n                        search\n                        selection\n                        options={commitmentsOptions}\n                        onChange={(e, { value }) => { setCommitment(value) }}\n                    />\n                </Form.Field>\n\n                <Form.Field>\n                    <label>Remotes</label>\n                    <Dropdown\n                        placeholder='Remotes'\n                        fluid\n                        search\n                        selection\n                        options={remotessOptions}\n                        onChange={(e, { value }) => { setRemotes(value) }}\n                    />\n                </Form.Field>\n\n            </Form.Group>\n\n            <Form.Field\n                control={Input}\n                label='Apply URL'\n                placeholder='Apply URL'\n                onChange={(e, { value }) => setLocationNames(value)}\n                value={locationNames}\n            />\n\n            <Form.Field>\n                <label>Tags</label>\n                <Dropdown\n                    options={tagOptions}\n                    placeholder='Tags'\n                    search\n                    selection\n                    fluid\n                    multiple\n                    allowAdditions\n                    value={tags}\n                    onAddItem={handleAddition}\n                    onChange={handleTagChange}\n                />\n            </Form.Field>\n\n            <Button primary>Submit</Button>\n\n        </Form>\n\n    </div>);\n}\n\nexport default PostJob;","import React from 'react';\nimport { client } from \"./ApolloClient/client\";\nimport { ApolloProvider } from '@apollo/client';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport './App.css';\n\nimport Navbar from './components/Navbar.js';\nimport Menubar from './components/Menubar.js';\nimport Companies from './components/companies/Companies';\nimport Jobs from './components/jobs/Jobs';\nimport CompanyProfile from './components/companies/CompanyProfile';\nimport JobProfile from './components/jobs/JobProfile';\nimport PostJob from './components/post-job/PostJob';\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"App\">\n          <Navbar></Navbar>\n          <Menubar></Menubar>\n          <div className=\"main__app\">\n\n            <Switch>\n              <Route exact path=\"/\">\n                <Companies />\n              </Route>\n              <Route exact path=\"/companies\">\n                <Companies />\n              </Route>\n              <Route exact path=\"/companies/:slug\">\n                <CompanyProfile />\n              </Route>\n              <Route exact path=\"/jobs\">\n                <Jobs />\n              </Route>\n              <Route exact path=\"/jobs/:slug\">\n                <JobProfile />\n              </Route>\n              <Route exact path=\"/post-job\">\n                <PostJob />\n              </Route>\n            </Switch>\n\n          </div>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport companyReducer from '../features/companies/companyStore';\nimport jobReducer from '../features/jobs/jobsStore';\n\nimport storage from 'redux-persist/lib/storage';\nimport { combineReducers } from 'redux';\nimport { persistReducer } from 'redux-persist';\nimport thunk from 'redux-thunk';\n\nconst reducers = combineReducers({\n  companies: companyReducer,\n  jobs: jobReducer,\n});\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n};\n\nconst persistedReducer = persistReducer(persistConfig, reducers);\n\nexport const store = configureStore({\n  reducer: persistedReducer,\n  devTools: process.env.NODE_ENV !== 'production',\n  middleware: [thunk],\n});","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\n\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { persistStore } from 'redux-persist';\n\nlet persistor = persistStore(store);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}